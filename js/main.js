document.addEventListener('DOMContentLoaded', () => {

    // --- Donn√©es des dossiers de flashcards ---
    const decksDataTerminale = [
        {
            name: "Physique-Chimie - Terminale",
            price: "14,99",
            cardCount: 212,
            features: ["Flashcards", "Toutes les d√©monstrations", "Cours num√©rique rigoureux"],
            chapters: [
                "Rappels de premi√®re",
                "Transformation Acide-Base et pH",
                "M√©thodes physiques d'Analyse : Spectroscopie UV-Visible ; Conductim√©trie",
                "M√©thodes Chimiques d'Analyse : Titrages pH-m√©trique et Conductim√©trique",
                "Description d'un mouvement - Cin√©matique",
                "Deuxi√®me loi de Newton",
                "Ph√©nom√®nes caract√©ristiques des ondes",
                "√âvolution d‚Äôun syst√®me chimique : cin√©tique chimique",
                "Physique chimique et sens d'√©volution",
                "√âquation du mouvement dans un champ uniforme",
                "√âquilibre acido-basique - Force des acides et des bases",
                "Strat√©gies de synth√®se en chimie organique",
                "Loi de Kepler",
                "Formation d'images avec une lunette astronomique",
                "Dynamique d'un syst√®me √©lectrique : circuit RC",
                "Thermodynamique",
                "Radioactivit√©",
                "Forcer le sens d'√©volution d'un syst√®me chimique",
                "Mod√©lisation de l'√©coulement d'un fluide",
                "Effet photo√©lectrique",
            ]
        },
        {
            name: "Math√©matiques - Terminale",
            price: "14,99",
            cardCount: 170,
            features: ["Flashcards", "Toutes les d√©monstrations", "Cours num√©rique rigoureux"],
            chapters: [
                "Rappels",
                "Raisonnement par r√©currence",
                "D√©nombrement (1)",
                "Les Suites",
                "G√©om√©trie dans l‚Äôespace (1√®re partie)",
                "Fonction exponentielle",
                "Compl√©ment sur la d√©rivation",
                "G√©om√©trie dans l'espace (2√®me partie)",
                "Limites et asymptotes",
                "Loi binomiale",
                "√âtude de fonction : continuit√©",
                "Logarithme N√©p√©rien",
                "Produit Scalaire dans l'Espace",
                "Primitives",
                "√âquations diff√©rentielles",
                "D√©nombrement (2)",
                "Fonctions cosinus et sinus",
                "Int√©gration et Aire",
                "Somme de variables al√©atoires",
                "In√©galit√© de Bienaym√©-Tchebychev",
            ]
        },
        {
            name: "Maths Expertes - Terminale",
            price: "7,99",
            cardCount: 47,
            features: ["Flashcards", "Cours num√©rique rigoureux"],
            chapters: [
                "Symboles math√©matiques",
                "La logique et r√©daction math√©matique",
                "Divisibilit√© dans ‚Ñ§",
                "Nombres Complexe (Part. 1)",
                "Matrices",
                "Nombres Complexes (Part. 2)",
            ]
        },
        {
            name: "Histoire - Terminale",
            price: "9,99",
            cardCount: 80,
            features: ["Flashcards", "Cours num√©rique rigoureux"],
            chapters: [
                "L'impact de la crise de 1929 : d√©s√©quilibres √©conomiques et sociaux",
                "Les r√©gimes totalitaires",
                "La Seconde Guerre mondiale",
            ]
        }
    ];

    const decksDataPremiere = [
        {
            name: "Physique-Chimie - Premi√®re",
            price: "14,99",
            cardCount: 190,
            features: ["Flashcards", "Toutes les d√©monstrations", "Cours num√©rique rigoureux"],
            chapters: ["Constitution de la mati√®re", "Mod√©lisation des transformations de la mati√®re", "L'√©nergie : conversions et transferts", "Ondes et signaux"]
        },
        {
            name: "Fran√ßais - Premi√®re",
            price: "8,99",
            cardCount: 150,
            features: ["Flashcards"],
            isLowerQuality: true,
            chapters: ["Le roman et le r√©cit du Moyen √Çge au XXIe si√®cle", "La po√©sie du XIXe si√®cle au XXIe si√®cle", "Le th√©√¢tre du XVIIe si√®cle au XXIe si√®cle", "La litt√©rature d'id√©es du XVIe si√®cle au XVIIIe si√®cle"]
        },
    ];

    // --- Fonction pour g√©n√©rer les cartes ---
    const createDeckElements = (decks, containerId, idPrefix) => {
        const container = document.getElementById(containerId);
        if (!container) return;

        decks.forEach((deck, index) => {
            const deckId = `${idPrefix}-${index}`;
            const deckElement = document.createElement('div');
            deckElement.classList.add('deck-item');

                        const featuresHTML = deck.features
                ? `<ul class="deck-features">
                    ${deck.features.map(feature => `<li>${feature}</li>`).join('')}
                   </ul>`
                : '';

            const qualityNoteHTML = deck.isLowerQuality
                ? `<div class="quality-note">Qualit√© l√©g√®rement inf√©rieure (1√®re √©dition)</div>`
                : '';

            deckElement.innerHTML = `
                <div class="deck-header">
                    <div>
                        <h4 class="deck-title">${deck.name}</h4>
                        <span class="deck-card-count">${deck.cardCount} flashcards</span>
                    </div>
                    <div class="deck-actions">
                        <button class="btn btn-secondary btn-toggle-chapters" data-deck-id="${deckId}">Voir les chapitres</button>
                        <button class="btn btn-primary btn-purchase" data-deck-name="${deck.name}" data-deck-price="${deck.price}">üõí Acheter - ${deck.price}‚Ç¨</button>
                    </div>
                </div>
                ${featuresHTML}
                ${qualityNoteHTML}
                <ul class="chapters-list" id="chapters-${deckId}">
                    ${deck.chapters.map(chapter => `<li>${chapter}</li>`).join('')}
                </ul>
            `;
            container.appendChild(deckElement);
        });
    };

    // --- G√©n√©ration des deux sections ---
    createDeckElements(decksDataTerminale, 'decks-list-terminale', 't');
    createDeckElements(decksDataPremiere, 'decks-list-premiere', 'p');

    // --- Gestion de l'√©v√©nement pour d√©rouler les chapitres (fonctionne pour toute la page) ---
    document.body.addEventListener('click', (event) => {
        if (event.target.classList.contains('btn-toggle-chapters')) {
            const button = event.target;
            const deckId = button.dataset.deckId;
            const chaptersList = document.getElementById(`chapters-${deckId}`);
            
            if (chaptersList) {
                chaptersList.classList.toggle('open');
                button.textContent = chaptersList.classList.contains('open') 
                    ? 'Masquer les chapitres' 
                    : 'Voir les chapitres';
            }
        }
    });

    // --- Logique du Modal d'Achat ---
    const modalOverlay = document.getElementById('purchase-modal');
    const purchaseForm = document.getElementById('purchase-form');
    const closeBtn = document.querySelector('.modal-close-btn');
    const deckNameInput = document.getElementById('form-deck-name');
    const deckPriceInput = document.getElementById('form-deck-price');

    if (modalOverlay) {
        const openModal = (deckName, deckPrice) => {
            deckNameInput.value = deckName;
            deckPriceInput.value = deckPrice;
            modalOverlay.style.display = 'flex';
            setTimeout(() => modalOverlay.classList.add('active'), 10);
        };

        const closeModal = () => {
            modalOverlay.classList.remove('active');
            setTimeout(() => modalOverlay.style.display = 'none', 300);
        };

        document.body.addEventListener('click', (event) => {
            const purchaseBtn = event.target.closest('.btn-purchase');
            if (purchaseBtn) {
                const deckName = purchaseBtn.dataset.deckName;
                const deckPrice = purchaseBtn.dataset.deckPrice;
                openModal(deckName, deckPrice);
            }
        });

        closeBtn.addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (event) => {
            if (event.target === modalOverlay) {
                closeModal();
            }
        });

        purchaseForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const submitButton = purchaseForm.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.textContent = 'Envoi en cours...';

            const scriptURL = 'https://script.google.com/macros/s/AKfycbxVx_qVHq8CjXr8Gre5cl-IMUv3kk0ojgxHEozOvS5Pk59XEP_qtgM8sKeTpLZFBeE5nA/exec';

            const formData = new FormData(purchaseForm);
            const priceWithComma = formData.get('price');
            const priceWithDot = priceWithComma.replace(',', '.');
            formData.set('price', priceWithDot);

            fetch(scriptURL, { method: 'POST', body: formData })
                .then(response => {
                    const modalContent = document.querySelector('.modal-content');

                    modalContent.innerHTML = `
                        <h3>Merci !</h3>
                        <p>Votre demande a √©t√© enregistr√©e. Cliquez sur le bouton ci-dessous pour finaliser votre commande.</p>
                        <a href="https://www.paypal.me/LucasM54/${priceWithDot}" target="_blank" class="btn btn-primary btn-paypal">
                            Payer ${priceWithDot}‚Ç¨ avec PayPal
                        </a>
                        <p style="margin-top: 20px; font-size: 0.9rem;">Vous recevrez l'acc√®s par email apr√®s confirmation du paiement.</p>
                        <button class="btn btn-secondary" onclick="location.reload()" style="margin-top:10px;">Fermer</button>
                    `;
                })
                .catch(error => {
                    console.error('Error!', error.message);
                    const modalContent = document.querySelector('.modal-content');
                    modalContent.innerHTML = `
                        <h3>Erreur</h3>
                        <p>Une erreur est survenue. Veuillez r√©essayer ou me contacter directement.</p>
                        <button class="btn btn-secondary" onclick="location.reload()">Fermer</button>
                    `;
                });
        });
    }
});
